<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/POJO/Ventas.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/POJO/Ventas.java" />
              <option name="originalContent" value="package POJO;&#10;&#10;import java.io.*;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Scanner;&#10;&#10;/**&#10; * Clase Ventas&#10; * - Gestiona las operaciones relacionadas con las ventas de la librería.&#10; * - Almacena las ventas en &quot;datos_libreria/Ventas.txt&quot; con el formato:&#10; *   DNI;ISBN;Fecha;Unidades;PrecioTotal;&#10; *&#10; * Notas:&#10; * - Al igual que las otras clases POJO del proyecto, mezcla representación de datos&#10; *   con operaciones de E/S y entrada por consola. En una aplicación más grande&#10; *   convendría separar modelo, acceso a datos y capa de interacción.&#10; */&#10;public class Ventas {&#10;    // Campos que describen una venta&#10;    private String DNI;            // DNI del cliente que realiza la compra&#10;    private String ISBN;           // ISBN del libro vendido&#10;    private String Fecha;          // Fecha de la venta (cadena)&#10;    private int Unidades;          // Cantidad de unidades vendidas&#10;    private double Precio_Total;   // Precio total de la venta&#10;    String archivo = &quot;datos_libreria/Ventas.txt&quot;; // Ruta del archivo de ventas&#10;    static Scanner sc = new Scanner(System.in);     // Scanner compartido para entrada por consola&#10;&#10;    // Constructores&#10;    public Ventas() {&#10;    }&#10;&#10;    // Constructor con fecha explícita&#10;    public Ventas(String DNI, String ISBN, String fecha, int unidades, double precio_Total) {&#10;        this.DNI = DNI;&#10;        this.ISBN = ISBN;&#10;        Fecha = fecha;&#10;        Unidades = unidades;&#10;        Precio_Total = precio_Total;&#10;    }&#10;    // Constructor que dejará que el método que escribe la venta ponga la fecha actual&#10;    public Ventas(String DNI, String ISBN, int unidades, double precio_Total) {&#10;        this.DNI = DNI;&#10;        this.ISBN = ISBN;&#10;        Unidades = unidades;&#10;        Precio_Total = precio_Total;&#10;    }&#10;&#10;    // Getters y setters&#10;    public String getDNI() {&#10;        return DNI;&#10;    }&#10;&#10;    public void setDNI(String DNI) {&#10;        this.DNI = DNI;&#10;    }&#10;&#10;    public String getISBN() {&#10;        return ISBN;&#10;    }&#10;&#10;    public void setISBN(String ISBN) {&#10;        this.ISBN = ISBN;&#10;    }&#10;&#10;    public String getFecha() {&#10;        return Fecha;&#10;    }&#10;&#10;    public void setFecha(String fecha) {&#10;        Fecha = fecha;&#10;    }&#10;&#10;    public double getPrecio_Total() {&#10;        return Precio_Total;&#10;    }&#10;&#10;    public void setPrecio_Total(double precio_Total) {&#10;        Precio_Total = precio_Total;&#10;    }&#10;&#10;    public int getUnidades() {&#10;        return Unidades;&#10;    }&#10;&#10;    public void setUnidades(int unidades) {&#10;        Unidades = unidades;&#10;    }&#10;&#10;    /**&#10;     * crearArchivosVentas&#10;     * - Crea el directorio &quot;datos_libreria&quot; y el archivo de ventas si no existen.&#10;     */&#10;    public void crearArchivosVentas(){&#10;        File carpeta = new File(&quot;datos_libreria&quot;);&#10;        if(!carpeta.exists()){&#10;            carpeta.mkdir();&#10;        }&#10;        try{&#10;            File ventas = new File(archivo);&#10;            if(!ventas.exists()){&#10;                ventas.createNewFile();&#10;&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * escribirVenta&#10;     * - Escribe una venta en el archivo con la fecha actual.&#10;     * - Antes de escribir actualiza el stock del libro y la cantidad del cliente&#10;     *   (llama a `actualizarStock` y `actualizarCantidad`). Si alguna de esas&#10;     *   operaciones falla, no registra la venta.&#10;     */&#10;    public void escribirVenta(Ventas venta){&#10;        try(BufferedWriter bf = new BufferedWriter(new FileWriter(archivo,true))){&#10;            Date fechaActual = new Date();&#10;            SimpleDateFormat formato = new SimpleDateFormat(&quot;dd-MM-yyyy&quot;);&#10;            String linea = venta.getDNI() + &quot;;&quot; +&#10;                    venta.getISBN() + &quot;;&quot; +&#10;                    formato.format(fechaActual) + &quot;;&quot; +&#10;                    venta.getUnidades() + &quot;;&quot; +&#10;                    venta.getPrecio_Total() + &quot;;&quot; ;&#10;            // Actualizar stock y cantidad en ficheros relacionados antes de escribir&#10;            if(actualizarStock(venta.getISBN(), venta.getUnidades()) &amp;&amp; actualizarCantidad(venta.getDNI(), venta.getUnidades()) ){&#10;                    bf.write(linea);&#10;                    bf.newLine();&#10;            } else {&#10;                System.out.println(&quot;La venta no se pudo completar&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * actualizarCantidad&#10;     * - Incrementa la 'cantidad' asociada a un cliente en &quot;Clientes.txt&quot;.&#10;     * - Reescribe el archivo mediante un temporal. Devuelve true si se actualizó.&#10;     * - Si el cliente no existe devuelve false.&#10;     */&#10;    public boolean actualizarCantidad(String dni, int unidades) {&#10;        File temp = new File(&quot;datos_libreria/Clientestemp.txt&quot;);&#10;        File archivin = new File(&quot;datos_libreria/Clientes.txt&quot;);&#10;        boolean actualizado = false;&#10;        try (BufferedWriter bf = new BufferedWriter(new FileWriter(temp));&#10;             BufferedReader bfr = new BufferedReader(new FileReader(archivin))) {&#10;            String linea;&#10;            while ((linea = bfr.readLine()) != null) {&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length == 5) {&#10;                    if (dni.equalsIgnoreCase(partes[0])) {&#10;                        int cantidadVieja = Integer.parseInt(partes[4]);&#10;                        int nuevaCantidad = cantidadVieja + unidades;&#10;                        // Reconstruir la línea con la cantidad actualizada&#10;                        linea = partes[0] + &quot;;&quot; + partes[1] + &quot;;&quot; + partes[2] + &quot;;&quot; + partes[3] + &quot;;&quot; + nuevaCantidad;&#10;                        actualizado = true;&#10;                    }&#10;                }&#10;                bf.write(linea);&#10;                bf.newLine();&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(e.getMessage());&#10;&#10;        }&#10;        if (!actualizado) {&#10;            System.out.println(&quot;El cliente no existe&quot;);&#10;        }&#10;        // Si se escribió el temporal, reemplazamos el original&#10;        if (temp.exists()) {&#10;            archivin.delete();&#10;            temp.renameTo(archivin);&#10;        }&#10;        return actualizado;&#10;&#10;    }&#10;&#10;    /**&#10;     * actualizarStock&#10;     * - Resta 'unidades' al stock del libro con el ISBN dado en &quot;Libros.txt&quot;.&#10;     * - Reescribe el archivo mediante un temporal. Devuelve true si la operación se realizó&#10;     *   (es decir, si había suficiente stock y se actualizó), false en caso contrario.&#10;     */&#10;    public boolean actualizarStock(String isbn, int unidades){&#10;        File temp = new File(&quot;datos_libreria/Librostemp.txt&quot;);&#10;        File archivin = new File(&quot;datos_libreria/Libros.txt&quot;);&#10;        boolean actualizado = false;&#10;    try(BufferedWriter bf = new BufferedWriter(new FileWriter(temp));&#10;        BufferedReader bfr = new BufferedReader(new FileReader(archivin))) {&#10;        String linea;&#10;&#10;        while ((linea = bfr.readLine()) != null) {&#10;            String[] partes = linea.split(&quot;;&quot;);&#10;            if (partes.length == 6) {&#10;                if (isbn.equalsIgnoreCase(partes[0])) {&#10;                    int Stockviejo = Integer.parseInt(partes[5]);&#10;                    if(unidades&lt;=Stockviejo){&#10;                        int NuevoStock = Stockviejo - unidades;&#10;                        linea = (partes[0] + &quot;;&quot; + partes[1] + &quot;;&quot; + partes[2] + &quot;;&quot; + partes[3] + &quot;;&quot; + partes[4] + &quot;;&quot; + NuevoStock + &quot;;&quot;);&#10;                        actualizado = true;&#10;                    }&#10;                }&#10;            }&#10;            // Escribir la línea (modificada o no) en el temporal&#10;            bf.newLine();&#10;            bf.write(linea);&#10;&#10;        }&#10;    }&#10;     catch (IOException e) {&#10;        System.out.println(e.getMessage());&#10;&#10;       } if(temp.exists()){&#10;            archivin.delete();&#10;            temp.renameTo(archivin);}&#10;    if(!actualizado){&#10;        System.out.println(&quot;No hay tantas unidades de libros disponibles&quot;);&#10;    }&#10;    return actualizado;&#10;    }&#10;&#10;    /**&#10;     * calcularPrecioTotal&#10;     * - Busca el precio unitario del libro en &quot;Libros.txt&quot; y calcula el total&#10;     *   multiplicando por el número de unidades solicitadas.&#10;     * - Si no encuentra el libro devuelve 0.&#10;     */&#10;    public double calcularPrecioTotal(String isbn, int unidades){&#10;        double precio = 0;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(&quot;datos_libreria/Libros.txt&quot;))){&#10;&#10;            String linea;&#10;            while((linea = bf.readLine())!=null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if(partes.length==6){&#10;                    if(isbn.equalsIgnoreCase(partes[0])){&#10;                         precio = unidades * Double.parseDouble(partes[4]);&#10;&#10;                    }&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;        return precio;&#10;&#10;    }&#10;&#10;    /**&#10;     * registrarUnaVenta&#10;     * - Interactúa con el usuario para pedir ISBN, DNI y unidades; calcula el precio y&#10;     *   trata de registrar la venta usando `escribirVenta`.&#10;     */&#10;    public void registrarUnaVenta(){&#10;    try{&#10;        System.out.println(&quot;Procedemos a registrar la venta: &quot; );&#10;        System.out.println(&quot;Dime un isbn: &quot;);&#10;        String isbn = sc.nextLine();&#10;        System.out.println(&quot;Dime un dni: &quot;);&#10;        String dni = sc.nextLine();&#10;        System.out.println(&quot;Dime cuantos ejemplares quieres comprar: &quot;);&#10;        int unidades = sc.nextInt();&#10;        sc.nextLine();&#10;        double precioTotal=calcularPrecioTotal(isbn,unidades);&#10;        if(precioTotal!=0){&#10;            escribirVenta(new Ventas(dni,isbn,unidades,precioTotal));&#10;        } else {&#10;            System.out.println(&quot;El libro no existe&quot;);&#10;        }&#10;&#10;    } catch (Exception e){&#10;        System.out.println(e.getMessage());&#10;    }&#10;    }&#10;&#10;    /**&#10;     * mostrarFechas&#10;     * - Muestra todas las ventas que ocurren en la fecha indicada por el usuario.&#10;     * - Lee el archivo de ventas y compara el campo fecha.&#10;     */&#10;    public void mostrarFechas(){&#10;        boolean fechas = false;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(archivo))){&#10;            String linea;&#10;            System.out.println(&quot;Dime que fecha quieres buscar: (dd-MM-yyyy)&quot;);&#10;            String date = sc.nextLine();&#10;            while((linea = bf.readLine())!= null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if(partes.length==5){&#10;                    if(date.equalsIgnoreCase(partes[3])){&#10;                        System.out.println(&quot; DNI: &quot; + partes[0] + &quot; ISBN: &quot; + partes[1] + &quot; Fecha: &quot; + partes[2] + &quot; Unidades: &quot; + partes[3] + &quot; Precio Total: &quot; + partes[4]);&#10;                        fechas = true;&#10;                    }&#10;                }&#10;            }&#10;        }catch (IOException e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;    if(!fechas){&#10;        System.out.println(&quot;No hay Ventas en esa fecha&quot;);&#10;    }&#10;&#10;    }&#10;&#10;    /**&#10;     * mostrarVentasporDNI&#10;     * - Muestra todas las ventas realizadas por el DNI indicado por el usuario.&#10;     */&#10;    public void mostrarVentasporDNI(){&#10;        boolean d = false;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(archivo))){&#10;            String linea;&#10;            System.out.println(&quot;Dime que DNI quieres buscar: &quot;);&#10;            String dni = sc.nextLine();&#10;            while((linea = bf.readLine())!= null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if(partes.length==5){&#10;                    if(dni.equalsIgnoreCase(partes[0])){&#10;                        System.out.println(&quot; DNI: &quot; + partes[0] + &quot; ISBN: &quot; + partes[1] + &quot; Fecha: &quot; + partes[2] + &quot; Unidades: &quot; + partes[3] + &quot; Precio Total: &quot; + partes[4]);&#10;                        d = true;&#10;                    }&#10;                }&#10;            }&#10;        }catch (IOException e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;        if(!d){&#10;            System.out.println(&quot;No hay Ventas con ese DNI&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    /**&#10;     * mostrarVentasporISBN&#10;     * - Muestra todas las ventas de un libro (ISBN) indicado por el usuario.&#10;     */&#10;    public void mostrarVentasporISBN(){&#10;        boolean d = false;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(archivo))){&#10;            String linea;&#10;            System.out.println(&quot;Dime que ISBN quieres buscar: &quot;);&#10;            String isbn = sc.nextLine();&#10;            while((linea = bf.readLine())!= null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if(partes.length==5){&#10;                    if(isbn.equalsIgnoreCase(partes[1])){&#10;                        System.out.println(&quot; DNI: &quot; + partes[0] + &quot; ISBN: &quot; + partes[1] + &quot; Fecha: &quot; + partes[2] + &quot; Unidades: &quot; + partes[3] + &quot; Precio Total: &quot; + partes[4]);&#10;                        d = true;&#10;                    }&#10;                }&#10;            }&#10;        }catch (IOException e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;        if(!d){&#10;            System.out.println(&quot;No hay Ventas con ese ISBN&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    /**&#10;     * calcularTotalGanado&#10;     * - Suma el campo Precio Total de todas las ventas y muestra el total.&#10;     */&#10;    public void calcularTotalGanado(){&#10;        double total=0;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(archivo))){&#10;            String linea;&#10;            while((linea = bf.readLine())!= null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if(partes.length==5){&#10;                        total = total + Double.parseDouble(partes[5]);&#10;                    }&#10;            }&#10;            System.out.println(&quot;El total ganado es de: &quot; + total + &quot;euros&quot;);&#10;        }catch (IOException e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package POJO;&#10;&#10;import java.io.*;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Scanner;&#10;&#10;/**&#10; * Clase Ventas&#10; * - Gestiona las operaciones relacionadas con las ventas de la librería.&#10; * - Almacena las ventas en &quot;datos_libreria/Ventas.txt&quot; con el formato:&#10; *   DNI;ISBN;Fecha;Unidades;PrecioTotal;&#10; *&#10; * Notas:&#10; * - Al igual que las otras clases POJO del proyecto, mezcla representación de datos&#10; *   con operaciones de E/S y entrada por consola. En una aplicación más grande&#10; *   convendría separar modelo, acceso a datos y capa de interacción.&#10; */&#10;public class Ventas {&#10;    // Campos que describen una venta&#10;    private String DNI;            // DNI del cliente que realiza la compra&#10;    private String ISBN;           // ISBN del libro vendido&#10;    private String Fecha;          // Fecha de la venta (cadena)&#10;    private int Unidades;          // Cantidad de unidades vendidas&#10;    private double Precio_Total;   // Precio total de la venta&#10;    String archivo = &quot;datos_libreria/Ventas.txt&quot;; // Ruta del archivo de ventas&#10;    static Scanner sc = new Scanner(System.in);     // Scanner compartido para entrada por consola&#10;&#10;    // Constructores&#10;    public Ventas() {&#10;    }&#10;&#10;    // Constructor con fecha explícita&#10;    public Ventas(String DNI, String ISBN, String fecha, int unidades, double precio_Total) {&#10;        this.DNI = DNI;&#10;        this.ISBN = ISBN;&#10;        Fecha = fecha;&#10;        Unidades = unidades;&#10;        Precio_Total = precio_Total;&#10;    }&#10;    // Constructor que dejará que el método que escribe la venta ponga la fecha actual&#10;    public Ventas(String DNI, String ISBN, int unidades, double precio_Total) {&#10;        this.DNI = DNI;&#10;        this.ISBN = ISBN;&#10;        Unidades = unidades;&#10;        Precio_Total = precio_Total;&#10;    }&#10;&#10;    // Getters y setters&#10;    public String getDNI() {&#10;        return DNI;&#10;    }&#10;&#10;    public void setDNI(String DNI) {&#10;        this.DNI = DNI;&#10;    }&#10;&#10;    public String getISBN() {&#10;        return ISBN;&#10;    }&#10;&#10;    public void setISBN(String ISBN) {&#10;        this.ISBN = ISBN;&#10;    }&#10;&#10;    public String getFecha() {&#10;        return Fecha;&#10;    }&#10;&#10;    public void setFecha(String fecha) {&#10;        Fecha = fecha;&#10;    }&#10;&#10;    public double getPrecio_Total() {&#10;        return Precio_Total;&#10;    }&#10;&#10;    public void setPrecio_Total(double precio_Total) {&#10;        Precio_Total = precio_Total;&#10;    }&#10;&#10;    public int getUnidades() {&#10;        return Unidades;&#10;    }&#10;&#10;    public void setUnidades(int unidades) {&#10;        Unidades = unidades;&#10;    }&#10;&#10;    /**&#10;     * crearArchivosVentas&#10;     * - Crea el directorio &quot;datos_libreria&quot; y el archivo de ventas si no existen.&#10;     */&#10;    public void crearArchivosVentas(){&#10;        File carpeta = new File(&quot;datos_libreria&quot;);&#10;        if(!carpeta.exists()){&#10;            carpeta.mkdir();&#10;        }&#10;        try{&#10;            File ventas = new File(archivo);&#10;            if(!ventas.exists()){&#10;                ventas.createNewFile();&#10;&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * escribirVenta&#10;     * - Escribe una venta en el archivo con la fecha actual.&#10;     * - Antes de escribir actualiza el stock del libro y la cantidad del cliente&#10;     *   (llama a `actualizarStock` y `actualizarCantidad`). Si alguna de esas&#10;     *   operaciones falla, no registra la venta.&#10;     */&#10;    public void escribirVenta(Ventas venta){&#10;        try(BufferedWriter bf = new BufferedWriter(new FileWriter(archivo,true))){&#10;            Date fechaActual = new Date();&#10;            SimpleDateFormat formato = new SimpleDateFormat(&quot;dd-MM-yyyy&quot;);&#10;            String linea = venta.getDNI() + &quot;;&quot; +&#10;                    venta.getISBN() + &quot;;&quot; +&#10;                    formato.format(fechaActual) + &quot;;&quot; +&#10;                    venta.getUnidades() + &quot;;&quot; +&#10;                    venta.getPrecio_Total() + &quot;;&quot; ;&#10;            // Actualizar stock y cantidad en ficheros relacionados antes de escribir&#10;            if(actualizarStock(venta.getISBN(), venta.getUnidades()) &amp;&amp; actualizarCantidad(venta.getDNI(), venta.getUnidades()) ){&#10;                    bf.write(linea);&#10;                    bf.newLine();&#10;            } else {&#10;                System.out.println(&quot;La venta no se pudo completar&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * actualizarCantidad&#10;     * - Incrementa la 'cantidad' asociada a un cliente en &quot;Clientes.txt&quot;.&#10;     * - Reescribe el archivo mediante un temporal. Devuelve true si se actualizó.&#10;     * - Si el cliente no existe devuelve false.&#10;     */&#10;    public boolean actualizarCantidad(String dni, int unidades) {&#10;        File temp = new File(&quot;datos_libreria/Clientestemp.txt&quot;);&#10;        File archivin = new File(&quot;datos_libreria/Clientes.txt&quot;);&#10;        boolean actualizado = false;&#10;        try (BufferedWriter bf = new BufferedWriter(new FileWriter(temp));&#10;             BufferedReader bfr = new BufferedReader(new FileReader(archivin))) {&#10;            String linea;&#10;            while ((linea = bfr.readLine()) != null) {&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length == 5) {&#10;                    if (dni.equalsIgnoreCase(partes[0])) {&#10;                        int cantidadVieja = Integer.parseInt(partes[4]);&#10;                        int nuevaCantidad = cantidadVieja + unidades;&#10;                        // Reconstruir la línea con la cantidad actualizada&#10;                        linea = partes[0] + &quot;;&quot; + partes[1] + &quot;;&quot; + partes[2] + &quot;;&quot; + partes[3] + &quot;;&quot; + nuevaCantidad;&#10;                        actualizado = true;&#10;                    }&#10;                }&#10;                bf.write(linea);&#10;                bf.newLine();&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(e.getMessage());&#10;&#10;        }&#10;        if (!actualizado) {&#10;            System.out.println(&quot;El cliente no existe&quot;);&#10;        }&#10;        // Si se escribió el temporal, reemplazamos el original&#10;        if (temp.exists()) {&#10;            archivin.delete();&#10;            temp.renameTo(archivin);&#10;        }&#10;        return actualizado;&#10;&#10;    }&#10;&#10;    /**&#10;     * actualizarStock&#10;     * - Resta 'unidades' al stock del libro con el ISBN dado en &quot;Libros.txt&quot;.&#10;     * - Reescribe el archivo mediante un temporal. Devuelve true si la operación se realizó&#10;     *   (es decir, si había suficiente stock y se actualizó), false en caso contrario.&#10;     */&#10;    public boolean actualizarStock(String isbn, int unidades){&#10;        File temp = new File(&quot;datos_libreria/Librostemp.txt&quot;);&#10;        File archivin = new File(&quot;datos_libreria/Libros.txt&quot;);&#10;        boolean actualizado = false;&#10;    try(BufferedWriter bf = new BufferedWriter(new FileWriter(temp));&#10;        BufferedReader bfr = new BufferedReader(new FileReader(archivin))) {&#10;        String linea;&#10;&#10;        while ((linea = bfr.readLine()) != null) {&#10;            String[] partes = linea.split(&quot;;&quot;);&#10;            if (partes.length == 6) {&#10;                if (isbn.equalsIgnoreCase(partes[0])) {&#10;                    int Stockviejo = Integer.parseInt(partes[5]);&#10;                    if(unidades&lt;=Stockviejo){&#10;                        int NuevoStock = Stockviejo - unidades;&#10;                        linea = (partes[0] + &quot;;&quot; + partes[1] + &quot;;&quot; + partes[2] + &quot;;&quot; + partes[3] + &quot;;&quot; + partes[4] + &quot;;&quot; + NuevoStock + &quot;;&quot;);&#10;                        actualizado = true;&#10;                    }&#10;                }&#10;            }&#10;            // Escribir la línea (modificada o no) en el temporal&#10;            bf.newLine();&#10;            bf.write(linea);&#10;&#10;        }&#10;    }&#10;     catch (IOException e) {&#10;        System.out.println(e.getMessage());&#10;&#10;       } if(temp.exists()){&#10;            archivin.delete();&#10;            temp.renameTo(archivin);}&#10;    if(!actualizado){&#10;        System.out.println(&quot;No hay tantas unidades de libros disponibles&quot;);&#10;    }&#10;    return actualizado;&#10;    }&#10;&#10;    /**&#10;     * calcularPrecioTotal&#10;     * - Busca el precio unitario del libro en &quot;Libros.txt&quot; y calcula el total&#10;     *   multiplicando por el número de unidades solicitadas.&#10;     * - Si no encuentra el libro devuelve 0.&#10;     */&#10;    public double calcularPrecioTotal(String isbn, int unidades){&#10;        double precio = 0;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(&quot;datos_libreria/Libros.txt&quot;))){&#10;&#10;            String linea;&#10;            while((linea = bf.readLine())!=null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if(partes.length==6){&#10;                    if(isbn.equalsIgnoreCase(partes[0])){&#10;                         precio = unidades * Double.parseDouble(partes[4]);&#10;&#10;                    }&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;        return precio;&#10;&#10;    }&#10;&#10;    /**&#10;     * registrarUnaVenta&#10;     * - Interactúa con el usuario para pedir ISBN, DNI y unidades; calcula el precio y&#10;     *   trata de registrar la venta usando `escribirVenta`.&#10;     */&#10;    public void registrarUnaVenta(){&#10;    try{&#10;        System.out.println(&quot;Procedemos a registrar la venta: &quot; );&#10;        System.out.println(&quot;Dime un isbn: &quot;);&#10;        String isbn = sc.nextLine();&#10;        System.out.println(&quot;Dime un dni: &quot;);&#10;        String dni = sc.nextLine();&#10;        System.out.println(&quot;Dime cuantos ejemplares quieres comprar: &quot;);&#10;        int unidades = sc.nextInt();&#10;        sc.nextLine();&#10;        double precioTotal=calcularPrecioTotal(isbn,unidades);&#10;        if(precioTotal!=0){&#10;            escribirVenta(new Ventas(dni,isbn,unidades,precioTotal));&#10;        } else {&#10;            System.out.println(&quot;El libro no existe&quot;);&#10;        }&#10;&#10;    } catch (Exception e){&#10;        System.out.println(e.getMessage());&#10;    }&#10;    }&#10;&#10;    /**&#10;     * mostrarFechas&#10;     * - Muestra todas las ventas que ocurren en la fecha indicada por el usuario.&#10;     * - Lee el archivo de ventas y compara el campo fecha (índice 2 en la línea).&#10;     */&#10;    public void mostrarFechas(){&#10;        boolean fechas = false;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(archivo))){&#10;            String linea;&#10;            System.out.println(&quot;Dime que fecha quieres buscar: (dd-MM-yyyy)&quot;);&#10;            String date = sc.nextLine();&#10;            while((linea = bf.readLine())!= null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                // Aceptamos líneas con al menos 5 campos: DNI;ISBN;Fecha;Unidades;Precio&#10;                if(partes.length &gt;= 5){&#10;                    // Fecha está en la posición 2&#10;                    if(date.equalsIgnoreCase(partes[2])){&#10;                        System.out.println(&quot; DNI: &quot; + partes[0] + &quot; ISBN: &quot; + partes[1] + &quot; Fecha: &quot; + partes[2] + &quot; Unidades: &quot; + partes[3] + &quot; Precio Total: &quot; + partes[4]);&#10;                        fechas = true;&#10;                    }&#10;                }&#10;            }&#10;        }catch (IOException e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;    if(!fechas){&#10;        System.out.println(&quot;No hay Ventas en esa fecha&quot;);&#10;    }&#10;&#10;    }&#10;&#10;    /**&#10;     * mostrarVentasporDNI&#10;     * - Muestra todas las ventas realizadas por el DNI indicado por el usuario.&#10;     */&#10;    public void mostrarVentasporDNI(){&#10;        boolean d = false;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(archivo))){&#10;            String linea;&#10;            System.out.println(&quot;Dime que DNI quieres buscar: &quot;);&#10;            String dni = sc.nextLine();&#10;            while((linea = bf.readLine())!= null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if(partes.length &gt;= 5){&#10;                    if(dni.equalsIgnoreCase(partes[0])){&#10;                        System.out.println(&quot; DNI: &quot; + partes[0] + &quot; ISBN: &quot; + partes[1] + &quot; Fecha: &quot; + partes[2] + &quot; Unidades: &quot; + partes[3] + &quot; Precio Total: &quot; + partes[4]);&#10;                        d = true;&#10;                    }&#10;                }&#10;            }&#10;        }catch (IOException e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;        if(!d){&#10;            System.out.println(&quot;No hay Ventas con ese DNI&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    /**&#10;     * mostrarVentasporISBN&#10;     * - Muestra todas las ventas de un libro (ISBN) indicado por el usuario.&#10;     */&#10;    public void mostrarVentasporISBN(){&#10;        boolean d = false;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(archivo))){&#10;            String linea;&#10;            System.out.println(&quot;Dime que ISBN quieres buscar: &quot;);&#10;            String isbn = sc.nextLine();&#10;            while((linea = bf.readLine())!= null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if(partes.length &gt;= 5){&#10;                    if(isbn.equalsIgnoreCase(partes[1])){&#10;                        System.out.println(&quot; DNI: &quot; + partes[0] + &quot; ISBN: &quot; + partes[1] + &quot; Fecha: &quot; + partes[2] + &quot; Unidades: &quot; + partes[3] + &quot; Precio Total: &quot; + partes[4]);&#10;                        d = true;&#10;                    }&#10;                }&#10;            }&#10;        }catch (IOException e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;        if(!d){&#10;            System.out.println(&quot;No hay Ventas con ese ISBN&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    /**&#10;     * calcularTotalGanado&#10;     * - Suma el campo Precio Total de todas las ventas y muestra el total.&#10;     */&#10;    public void calcularTotalGanado(){&#10;        double total=0;&#10;        try(BufferedReader bf = new BufferedReader(new FileReader(archivo))){&#10;            String linea;&#10;            while((linea = bf.readLine())!= null){&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                // Aceptar líneas con al menos 5 campos (índice 4 contiene el precio)&#10;                if(partes.length &gt;= 5){&#10;                        try{&#10;                            total = total + Double.parseDouble(partes[4]);&#10;                        } catch(NumberFormatException ex){&#10;                            // Ignorar líneas con formato numérico inválido&#10;                        }&#10;                    }&#10;            }&#10;            System.out.println(&quot;El total ganado es de: &quot; + total + &quot;euros&quot;);&#10;        }catch (IOException e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>