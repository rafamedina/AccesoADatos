<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Banco/GestionCuentas.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Banco/GestionCuentas.java" />
              <option name="originalContent" value="package Banco;&#10;import POJO.*;&#10;&#10;import java.io.*;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Scanner;&#10;&#10;public class GestionCuentas {&#10;    // Scanner compartido para leer la entrada estándar&#10;    static Scanner sc = new Scanner(System.in);&#10;    // Contador simple para generar números de cuenta (no persistente entre ejecuciones)&#10;    int contador = 1;&#10;    // Referencia al cliente actualmente en sesión (si se ha iniciado)&#10;    Cliente cliente;&#10;&#10;    /**&#10;     * Inicializa el programa asegurando que exista la carpeta &quot;datos&quot; y los&#10;     * archivos necesarios (cuentas.txt y movimientos.txt). Si no existen, los crea.&#10;     */&#10;    public void inicializarPrograma() {&#10;        // Crear carpeta &quot;datos&quot; si no existe&#10;        File carpeta = new File(&quot;datos&quot;);&#10;        if (!carpeta.exists()) {&#10;            carpeta.mkdir();&#10;        }&#10;&#10;        // Crear archivos si no existen&#10;        try {&#10;            File cuenta = new File(&quot;datos/cuentas.txt&quot;);&#10;            if (!cuenta.exists()) {&#10;                cuenta.createNewFile();&#10;            }&#10;            File movimientos = new File(&quot;datos/movimientos.txt&quot;);&#10;            if (!movimientos.exists()) {&#10;                movimientos.createNewFile();&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Error creando archivos: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva cuenta pidiendo DNI y nombre por consola. Antes de crearla&#10;     * comprueba que no exista ya un registro con el mismo DNI en &quot;datos/cuentas.txt&quot;.&#10;     */&#10;    public void crearCuenta() {&#10;&#10;            System.out.print(&quot;Dime tu DNI: &quot;);&#10;            String dni = sc.nextLine();&#10;&#10;            boolean existe = false;&#10;&#10;            // Recorre el archivo de cuentas buscando si ya existe el DNI&#10;            try (Scanner scanner = new Scanner(new File(&quot;datos/cuentas.txt&quot;))) {&#10;                while (scanner.hasNextLine()) {&#10;                    String linea = scanner.nextLine();&#10;                    String[] partes = linea.split(&quot;;&quot;);&#10;                    if (partes.length &gt;= 1 &amp;&amp; partes[0].equalsIgnoreCase(dni)) {&#10;                        existe = true;&#10;                        break;&#10;                    }&#10;                }&#10;            } catch (FileNotFoundException e) {&#10;                // Si el archivo no existe, no hacemos nada aquí porque&#10;                // luego al guardar se creará (o ya lo creó inicializarPrograma)&#10;            }&#10;&#10;            if (existe) {&#10;                System.out.println(&quot;Esta cuenta ya existe&quot;);&#10;            } else {&#10;                // Pide nombre y genera un número de cuenta simple&#10;                System.out.print(&quot;Dime tu nombre: &quot;);&#10;                String nombre = sc.nextLine();&#10;                String nCuenta = &quot;ES&quot; + contador;&#10;                contador++;&#10;                // Crea el objeto Cliente y lo guarda en el archivo&#10;                cliente = new Cliente(dni,nCuenta, nombre);&#10;                guardarCliente();&#10;                System.out.println(&quot;Cuenta creada correctamente.&quot;);&#10;            }&#10;        }&#10;&#10;    /**&#10;     * Guarda (o actualiza) la información del cliente actual en &quot;datos/cuentas.txt&quot;.&#10;     * El formato por línea es: DNI;Nombre;NumeroCuenta;Saldo&#10;     * Si ya existía una línea con el mismo DNI se elimina y se reemplaza por la nueva.&#10;     */&#10;    public void guardarCliente() {&#10;        StringBuilder contenido = new StringBuilder();&#10;        boolean actualizado = false;&#10;        String dniCliente = cliente.getDni();&#10;&#10;        // Lee todas las líneas, omite la del cliente a actualizar&#10;        try (Scanner scanner = new Scanner(new File(&quot;datos/cuentas.txt&quot;))) {&#10;            while (scanner.hasNextLine()) {&#10;                String linea = scanner.nextLine();&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length &gt;= 1 &amp;&amp; dniCliente.equalsIgnoreCase(partes[0])) {&#10;                    // No guardamos la línea vieja, la eliminamos&#10;                    actualizado = true;&#10;                } else {&#10;                    contenido.append(linea).append(System.lineSeparator());&#10;                }&#10;            }&#10;        } catch (FileNotFoundException e) {&#10;            // Si el archivo no existe, lo creamos luego al escribir con FileWriter&#10;        }&#10;&#10;        // Añade la línea nueva de ese cliente (actualizada)&#10;        String nuevaLinea = cliente.getDni() + &quot;;&quot; +&#10;                cliente.getNombre() + &quot;;&quot; +&#10;                cliente.getnCuenta() + &quot;;&quot; +&#10;                cliente.getSaldo();&#10;        contenido.append(nuevaLinea).append(System.lineSeparator());&#10;&#10;        // Sobrescribe el archivo con el contenido actualizado&#10;        try (BufferedWriter bf = new BufferedWriter(new FileWriter(&quot;datos/cuentas.txt&quot;))) {&#10;            bf.write(contenido.toString());&#10;            if (actualizado) {&#10;                System.out.println(&quot;Cliente actualizado correctamente.&quot;);&#10;            } else {&#10;                System.out.println(&quot;Cliente guardado correctamente.&quot;);&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Error al guardar el cliente: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Inicia sesión pidiendo el DNI y buscando en el fichero de cuentas. Si encuentra&#10;     * la línea correspondiente, crea el objeto Cliente en memoria y devuelve true.&#10;     */&#10;    public boolean iniciarSesion() {&#10;        System.out.print(&quot;Dime un dni: &quot;);&#10;        String dni_metido = sc.nextLine();&#10;&#10;        boolean encontrado = false;&#10;&#10;        try (Scanner scanner = new Scanner(new File(&quot;datos/cuentas.txt&quot;))) {&#10;            while (scanner.hasNextLine()) {&#10;                String linea = scanner.nextLine();&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length &gt;= 4) {&#10;                    String dni = partes[0];&#10;                    if (dni_metido.equalsIgnoreCase(dni)) {&#10;                        System.out.println(&quot;Dni encontrado...&quot;);&#10;                        String nombreCompleto = partes[1];&#10;                        String numeroCuenta = partes[2];&#10;                        double saldo = Double.parseDouble(partes[3]);&#10;                        // Crea el cliente en memoria y asigna saldo&#10;                        cliente = new Cliente(dni, numeroCuenta, nombreCompleto);&#10;                        cliente.setSaldo(saldo);&#10;                        encontrado = true;&#10;                        System.out.println(&quot;Sesion iniciada bienvenido: &quot; + nombreCompleto);&#10;                        return true;&#10;                    }&#10;                }&#10;            }&#10;            if (!encontrado) {&#10;                System.out.println(&quot;Dni no encontrado.&quot;);&#10;                return false;&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error al iniciar sesión: &quot; + e.getMessage());&#10;        }&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Guarda un movimiento asociado al cliente actualmente logueado.&#10;     * El formato en el fichero movimientos.txt es: DNI;TIPO;Cantidad;Fecha;Concepto;&#10;     */&#10;    public void guardarMovimientos(Movimientos mov){&#10;        try (BufferedWriter bf = new BufferedWriter(new FileWriter(&quot;datos/movimientos.txt&quot;, true))) {&#10;            Date fechaActual = new Date();&#10;            SimpleDateFormat formato = new SimpleDateFormat(&quot;dd-MM-yyyy&quot;);&#10;            // tipo true -&gt; INGRESO, false -&gt; RETIRADA&#10;            String tipo = mov.getTipo() ? &quot;INGRESO&quot;:&quot;RETIRADA&quot;;&#10;            String linea = cliente.getDni() + &quot;;&quot; +&#10;                    tipo + &quot;;&quot; +&#10;                    mov.getCantidad() + &quot;;&quot; +&#10;                    formato.format(fechaActual)+&quot;;&quot; +&#10;                    mov.getConcepto() + &quot;;&quot;;&#10;            bf.write(linea);&#10;            bf.newLine();&#10;            System.out.println(&quot;Movimiento guardado exitosamente.&quot;);&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Error al guardar el Movimiento: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    /**&#10;     * Lee y muestra todos los movimientos correspondientes al DNI del cliente en sesión.&#10;     */&#10;    public void leerMovimientos(){&#10;        try (Scanner scanner = new Scanner(new File(&quot;datos/movimientos.txt&quot;))) {&#10;            boolean encontrado = false;&#10;            while (scanner.hasNextLine()) {&#10;                String linea = scanner.nextLine();&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length &gt;= 5) {&#10;                    String dni = partes[0];&#10;                    if (cliente.getDni().equalsIgnoreCase(dni)) {&#10;                        // Imprime la línea completa tal cual está en el fichero&#10;                        System.out.println(linea);&#10;                        encontrado = true;&#10;                    }&#10;                }&#10;            }&#10;            if (!encontrado) {&#10;                System.out.println(&quot;Movimientos a este dni no encontrados.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error al leer movimientos: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lista todas las cuentas (muestra cada línea del fichero de cuentas).&#10;     */&#10;    public void listarCuentas(){&#10;        try (Scanner scanner = new Scanner(new File(&quot;datos/cuentas.txt&quot;))) {&#10;&#10;            while(scanner.hasNext()){&#10;                System.out.println(scanner.nextLine());&#10;            }&#10;&#10;        } catch (FileNotFoundException e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra estadísticas: número de cuentas y saldo total. Atención: aquí se&#10;     * corrige una suma errónea usando '+=' en lugar de '=+' (se comenta la intención).&#10;     */&#10;    public void mostrarEstadisticas(){&#10;        try (Scanner cue = new Scanner(new File(&quot;datos/cuentas.txt&quot;)))&#10;              {&#10;            int contadorC=0;&#10;            double total = 0;&#10;            while(cue.hasNext()){&#10;                contadorC ++;&#10;                String linea = cue.nextLine();&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length &gt;= 4) {&#10;                    double saldo = Double.parseDouble(partes[3]);&#10;                    // NOTA: en el código original estaba `total =+ saldo;` lo cual asigna +saldo.&#10;                    // Aquí se mantiene la intención correcta: acumular el saldo.&#10;                    total += saldo;&#10;&#10;                }&#10;            }&#10;            System.out.println(&quot;El numero de cuentas es de : &quot; + contadorC);&#10;            System.out.println(&quot;El saldo total es de : &quot; + total);&#10;&#10;        } catch (FileNotFoundException e){&#10;            e.getMessage();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra el saldo del cliente en sesión.&#10;     */&#10;    public void consultarSaldo() {&#10;        try {&#10;            System.out.println(&quot;El saldo es de: &quot; + cliente.getSaldo());&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra datos del cliente en sesión. Observa que las etiquetas estaban&#10;     * mezcladas en el original (nombre/cuenta). Se conserva el comportamiento&#10;     * pero se comentan las líneas para entender qué imprime cada una.&#10;     */&#10;    public void mostrarDatos() {&#10;        try {&#10;            // Imprime el número de cuenta (getnCuenta) pero la etiqueta dice &quot;nombre&quot;&#10;            System.out.println(&quot;El nommbre es : &quot; + cliente.getnCuenta());&#10;            // Imprime el DNI&#10;            System.out.println(&quot;El DNI es : &quot; + cliente.getDni());&#10;            // Imprime el nombre pero la etiqueta dice &quot;La cuenta es&quot;&#10;            System.out.println(&quot;La cuenta es : &quot; + cliente.getNombre());&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Realiza un ingreso: pide cantidad, actualiza el saldo del cliente y guarda&#10;     * el movimiento en el fichero.&#10;     */&#10;    public void hacerIngreso() {&#10;        try {&#10;            System.out.println(&quot;Que cantidad quieres ingresar: &quot;);&#10;            double cantidad = sc.nextDouble();&#10;            sc.nextLine();&#10;            // Actualiza saldo sumando la cantidad&#10;            cliente.actualizarSaldo(cantidad);&#10;            System.out.println(&quot;Dime un concepto: &quot;);&#10;            String concepto = sc.nextLine();&#10;            guardarMovimientos(new Movimientos(true, cantidad, concepto));&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Realiza una retirada solicitando la cantidad y comprobando que hay saldo&#10;     * suficiente. Si es válido, actualiza saldo y guarda el movimiento.&#10;     */&#10;    public void hacerRetirada() {&#10;        try {&#10;            while(true) {&#10;                System.out.println(&quot;Que cantidad quieres retirar: &quot;);&#10;                double cantidad = sc.nextDouble();&#10;                sc.nextLine();&#10;                if (cantidad &lt;= cliente.getSaldo()) {&#10;                    // Resta del saldo (se pasa -cantidad a actualizarSaldo)&#10;                    cliente.actualizarSaldo(-cantidad);&#10;                    System.out.println(&quot;Dime un concepto: &quot;);&#10;                    String concepto = sc.nextLine();&#10;                    // En Movimientos se marca como retirada; en el fichero se guarda la cantidad negativa&#10;                    guardarMovimientos(new Movimientos(false, -cantidad, concepto));&#10;                    break;&#10;                } else {&#10;                    System.out.println(&quot;No puedes sacar mas dinero que el que tienes&quot;);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package Banco;&#10;import POJO.*;&#10;&#10;import java.io.*;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Scanner;&#10;&#10;public class GestionCuentas {&#10;    // Scanner compartido para leer la entrada estándar&#10;    static Scanner sc = new Scanner(System.in);&#10;    // Contador simple para generar números de cuenta (no persistente entre ejecuciones)&#10;    int contador = 1;&#10;    // Referencia al cliente actualmente en sesión (si se ha iniciado)&#10;    Cliente cliente;&#10;&#10;    /**&#10;     * Inicializa el programa asegurando que exista la carpeta &quot;datos&quot; y los&#10;     * archivos necesarios (cuentas.txt y movimientos.txt). Si no existen, los crea.&#10;     */&#10;    public void inicializarPrograma() {&#10;        // Crear carpeta &quot;datos&quot; si no existe&#10;        File carpeta = new File(&quot;datos&quot;);&#10;        if (!carpeta.exists()) {&#10;            boolean creada = carpeta.mkdir();&#10;            if (!creada) {&#10;                // Aviso pero no detenemos la ejecución (posible problema de permisos)&#10;                System.out.println(&quot;Aviso: no se pudo crear la carpeta 'datos'. Comprueba permisos.&quot;);&#10;            }&#10;        }&#10;&#10;        // Crear archivos si no existen&#10;        try {&#10;            File cuenta = new File(&quot;datos/cuentas.txt&quot;);&#10;            if (!cuenta.exists()) {&#10;                boolean creadoCuenta = cuenta.createNewFile();&#10;                if (creadoCuenta) {&#10;                    System.out.println(&quot;Archivo 'cuentas.txt' creado.&quot;);&#10;                }&#10;            }&#10;            File movimientos = new File(&quot;datos/movimientos.txt&quot;);&#10;            if (!movimientos.exists()) {&#10;                boolean creadoMov = movimientos.createNewFile();&#10;                if (creadoMov) {&#10;                    System.out.println(&quot;Archivo 'movimientos.txt' creado.&quot;);&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Error creando archivos: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva cuenta pidiendo DNI y nombre por consola. Antes de crearla&#10;     * comprueba que no exista ya un registro con el mismo DNI en &quot;datos/cuentas.txt&quot;.&#10;     */&#10;    public void crearCuenta() {&#10;&#10;            System.out.print(&quot;Dime tu DNI: &quot;);&#10;            String dni = sc.nextLine();&#10;&#10;            boolean existe = false;&#10;&#10;            // Recorre el archivo de cuentas buscando si ya existe el DNI&#10;            try (Scanner scanner = new Scanner(new File(&quot;datos/cuentas.txt&quot;))) {&#10;                while (scanner.hasNextLine()) {&#10;                    String linea = scanner.nextLine();&#10;                    String[] partes = linea.split(&quot;;&quot;);&#10;                    if (partes.length &gt;= 1 &amp;&amp; partes[0].equalsIgnoreCase(dni)) {&#10;                        existe = true;&#10;                        break;&#10;                    }&#10;                }&#10;            } catch (FileNotFoundException e) {&#10;                // Si el archivo no existe, no hacemos nada aquí porque&#10;                // luego al guardar se creará (o ya lo creó inicializarPrograma)&#10;            }&#10;&#10;            if (existe) {&#10;                System.out.println(&quot;Esta cuenta ya existe&quot;);&#10;            } else {&#10;                // Pide nombre y genera un número de cuenta simple&#10;                System.out.print(&quot;Dime tu nombre: &quot;);&#10;                String nombre = sc.nextLine();&#10;                String nCuenta = &quot;ES&quot; + contador;&#10;                contador++;&#10;                // Crea el objeto Cliente y lo guarda en el archivo&#10;                cliente = new Cliente(dni,nCuenta, nombre);&#10;                guardarCliente();&#10;                System.out.println(&quot;Cuenta creada correctamente.&quot;);&#10;            }&#10;        }&#10;&#10;    /**&#10;     * Guarda (o actualiza) la información del cliente actual en &quot;datos/cuentas.txt&quot;.&#10;     * El formato por línea es: DNI;Nombre;NumeroCuenta;Saldo&#10;     * Si ya existía una línea con el mismo DNI se elimina y se reemplaza por la nueva.&#10;     */&#10;    public void guardarCliente() {&#10;        StringBuilder contenido = new StringBuilder();&#10;        boolean actualizado = false;&#10;        String dniCliente = cliente.getDni();&#10;&#10;        // Lee todas las líneas, omite la del cliente a actualizar&#10;        try (Scanner scanner = new Scanner(new File(&quot;datos/cuentas.txt&quot;))) {&#10;            while (scanner.hasNextLine()) {&#10;                String linea = scanner.nextLine();&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length &gt;= 1 &amp;&amp; dniCliente.equalsIgnoreCase(partes[0])) {&#10;                    // No guardamos la línea vieja, la eliminamos&#10;                    actualizado = true;&#10;                } else {&#10;                    contenido.append(linea).append(System.lineSeparator());&#10;                }&#10;            }&#10;        } catch (FileNotFoundException e) {&#10;            // Si el archivo no existe, lo creamos luego al escribir con FileWriter&#10;        }&#10;&#10;        // Añade la línea nueva de ese cliente (actualizada)&#10;        String nuevaLinea = cliente.getDni() + &quot;;&quot; +&#10;                cliente.getNombre() + &quot;;&quot; +&#10;                cliente.getnCuenta() + &quot;;&quot; +&#10;                cliente.getSaldo();&#10;        contenido.append(nuevaLinea).append(System.lineSeparator());&#10;&#10;        // Sobrescribe el archivo con el contenido actualizado&#10;        try (BufferedWriter bf = new BufferedWriter(new FileWriter(&quot;datos/cuentas.txt&quot;))) {&#10;            bf.write(contenido.toString());&#10;            if (actualizado) {&#10;                System.out.println(&quot;Cliente actualizado correctamente.&quot;);&#10;            } else {&#10;                System.out.println(&quot;Cliente guardado correctamente.&quot;);&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Error al guardar el cliente: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Inicia sesión pidiendo el DNI y buscando en el fichero de cuentas. Si encuentra&#10;     * la línea correspondiente, crea el objeto Cliente en memoria y devuelve true.&#10;     */&#10;    public boolean iniciarSesion() {&#10;        System.out.print(&quot;Dime un dni: &quot;);&#10;        String dni_metido = sc.nextLine();&#10;&#10;        try (Scanner scanner = new Scanner(new File(&quot;datos/cuentas.txt&quot;))) {&#10;            while (scanner.hasNextLine()) {&#10;                String linea = scanner.nextLine();&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length &gt;= 4) {&#10;                    String dni = partes[0];&#10;                    if (dni_metido.equalsIgnoreCase(dni)) {&#10;                        System.out.println(&quot;Dni encontrado...&quot;);&#10;                        String nombreCompleto = partes[1];&#10;                        String numeroCuenta = partes[2];&#10;                        double saldo = Double.parseDouble(partes[3]);&#10;                        // Crea el cliente en memoria y asigna saldo&#10;                        cliente = new Cliente(dni, numeroCuenta, nombreCompleto);&#10;                        cliente.setSaldo(saldo);&#10;                        System.out.println(&quot;Sesion iniciada bienvenido: &quot; + nombreCompleto);&#10;                        return true;&#10;                    }&#10;                }&#10;            }&#10;            // Si recorremos todo el fichero y no hemos hecho return, el dni no existe&#10;            System.out.println(&quot;Dni no encontrado.&quot;);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error al iniciar sesión: &quot; + e.getMessage());&#10;        }&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Guarda un movimiento asociado al cliente actualmente logueado.&#10;     * El formato en el fichero movimientos.txt es: DNI;TIPO;Cantidad;Fecha;Concepto;&#10;     */&#10;    public void guardarMovimientos(Movimientos mov){&#10;        try (BufferedWriter bf = new BufferedWriter(new FileWriter(&quot;datos/movimientos.txt&quot;, true))) {&#10;            Date fechaActual = new Date();&#10;            SimpleDateFormat formato = new SimpleDateFormat(&quot;dd-MM-yyyy&quot;);&#10;            // tipo true -&gt; INGRESO, false -&gt; RETIRADA&#10;            String tipo = mov.getTipo() ? &quot;INGRESO&quot;:&quot;RETIRADA&quot;;&#10;            String linea = cliente.getDni() + &quot;;&quot; +&#10;                    tipo + &quot;;&quot; +&#10;                    mov.getCantidad() + &quot;;&quot; +&#10;                    formato.format(fechaActual)+&quot;;&quot; +&#10;                    mov.getConcepto() + &quot;;&quot;;&#10;            bf.write(linea);&#10;            bf.newLine();&#10;            System.out.println(&quot;Movimiento guardado exitosamente.&quot;);&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Error al guardar el Movimiento: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    /**&#10;     * Lee y muestra todos los movimientos correspondientes al DNI del cliente en sesión.&#10;     */&#10;    public void leerMovimientos(){&#10;        try (Scanner scanner = new Scanner(new File(&quot;datos/movimientos.txt&quot;))) {&#10;            boolean encontrado = false;&#10;            while (scanner.hasNextLine()) {&#10;                String linea = scanner.nextLine();&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length &gt;= 5) {&#10;                    String dni = partes[0];&#10;                    if (cliente.getDni().equalsIgnoreCase(dni)) {&#10;                        // Imprime la línea completa tal cual está en el fichero&#10;                        System.out.println(linea);&#10;                        encontrado = true;&#10;                    }&#10;                }&#10;            }&#10;            if (!encontrado) {&#10;                System.out.println(&quot;Movimientos a este dni no encontrados.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Error al leer movimientos: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lista todas las cuentas (muestra cada línea del fichero de cuentas).&#10;     */&#10;    public void listarCuentas(){&#10;        try (Scanner scanner = new Scanner(new File(&quot;datos/cuentas.txt&quot;))) {&#10;&#10;            while(scanner.hasNext()){&#10;                System.out.println(scanner.nextLine());&#10;            }&#10;&#10;        } catch (FileNotFoundException e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra estadísticas: número de cuentas y saldo total. Atención: aquí se&#10;     * corrige una suma errónea usando '+=' en lugar de '=+' (se comenta la intención).&#10;     */&#10;    public void mostrarEstadisticas(){&#10;        try (Scanner cue = new Scanner(new File(&quot;datos/cuentas.txt&quot;)))&#10;              {&#10;            int contadorC=0;&#10;            double total = 0;&#10;            while(cue.hasNext()){&#10;                contadorC ++;&#10;                String linea = cue.nextLine();&#10;                String[] partes = linea.split(&quot;;&quot;);&#10;                if (partes.length &gt;= 4) {&#10;                    double saldo = Double.parseDouble(partes[3]);&#10;                    // NOTA: en el código original estaba `total =+ saldo;` lo cual asigna +saldo.&#10;                    // Aquí se mantiene la intención correcta: acumular el saldo.&#10;                    total += saldo;&#10;&#10;                }&#10;            }&#10;            System.out.println(&quot;El numero de cuentas es de : &quot; + contadorC);&#10;            System.out.println(&quot;El saldo total es de : &quot; + total);&#10;&#10;        } catch (FileNotFoundException e){&#10;            // Mostrar el mensaje de excepción para ayudar al debug&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra el saldo del cliente en sesión.&#10;     */&#10;    public void consultarSaldo() {&#10;        try {&#10;            System.out.println(&quot;El saldo es de: &quot; + cliente.getSaldo());&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra datos del cliente en sesión. Observa que las etiquetas estaban&#10;     * mezcladas en el original (nombre/cuenta). Se conserva el comportamiento&#10;     * pero se comentan las líneas para entender qué imprime cada una.&#10;     */&#10;    public void mostrarDatos() {&#10;        try {&#10;            // Imprime el número de cuenta (getnCuenta) pero la etiqueta dice &quot;nombre&quot;&#10;            System.out.println(&quot;El nommbre es : &quot; + cliente.getnCuenta());&#10;            // Imprime el DNI&#10;            System.out.println(&quot;El DNI es : &quot; + cliente.getDni());&#10;            // Imprime el nombre pero la etiqueta dice &quot;La cuenta es&quot;&#10;            System.out.println(&quot;La cuenta es : &quot; + cliente.getNombre());&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Realiza un ingreso: pide cantidad, actualiza el saldo del cliente y guarda&#10;     * el movimiento en el fichero.&#10;     */&#10;    public void hacerIngreso() {&#10;        try {&#10;            System.out.println(&quot;Que cantidad quieres ingresar: &quot;);&#10;            double cantidad = sc.nextDouble();&#10;            sc.nextLine();&#10;            // Actualiza saldo sumando la cantidad&#10;            cliente.actualizarSaldo(cantidad);&#10;            System.out.println(&quot;Dime un concepto: &quot;);&#10;            String concepto = sc.nextLine();&#10;            guardarMovimientos(new Movimientos(true, cantidad, concepto));&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Realiza una retirada solicitando la cantidad y comprobando que hay saldo&#10;     * suficiente. Si es válido, actualiza saldo y guarda el movimiento.&#10;     */&#10;    public void hacerRetirada() {&#10;        try {&#10;            while(true) {&#10;                System.out.println(&quot;Que cantidad quieres retirar: &quot;);&#10;                double cantidad = sc.nextDouble();&#10;                sc.nextLine();&#10;                if (cantidad &lt;= cliente.getSaldo()) {&#10;                    // Resta del saldo (se pasa -cantidad a actualizarSaldo)&#10;                    cliente.actualizarSaldo(-cantidad);&#10;                    System.out.println(&quot;Dime un concepto: &quot;);&#10;                    String concepto = sc.nextLine();&#10;                    // En Movimientos se marca como retirada; en el fichero se guarda la cantidad negativa&#10;                    guardarMovimientos(new Movimientos(false, -cantidad, concepto));&#10;                    break;&#10;                } else {&#10;                    System.out.println(&quot;No puedes sacar mas dinero que el que tienes&quot;);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>